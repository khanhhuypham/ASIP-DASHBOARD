{"ast":null,"code":"import { format, parse } from \"date-fns\";\nexport const getTodayDate = () => {\n  const today = new Date();\n  const day = String(today.getDate()).padStart(2, \"0\");\n  const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed\n  const year = today.getFullYear();\n  return `${day}/${month}/${year}`;\n};\nexport const getTodayYearMonthDay = () => {\n  const today = new Date();\n  const day = String(today.getDate()).padStart(2, \"0\");\n  const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Tháng bắt đầu từ 0\n  const year = today.getFullYear();\n  return `${year}-${month}-${day}`; // Trả về định dạng YYYY-MM-DD\n};\nexport const getCurrentTime = () => {\n  const today = new Date();\n  const hour = today.getHours();\n  const minutes = today.getMinutes();\n  return `${hour}:${minutes}`;\n};\n\n/**\n * Converts a date string from one format to another.\n * @param {string} dateString - The date string to be converted.\n * @param {string} currentFormat - The current format of the date string (e.g., 'dd/MM/yyyy').\n * @param {string} desiredFormat - The desired format to convert to (e.g., 'yyyy/MM/dd').\n * @returns {string} - The converted date string in the desired format.\n */\n// export const convertDateFormat = (\n//     dateString: string,\n//     currentFormat: string,\n//     desiredFormat: string\n// ) => {\n//     try {\n//         // Parse the date using the current format\n//         const parsedDate = parse(dateString, currentFormat, new Date());\n//         // Format it to the desired format\n//         return format(parsedDate, desiredFormat);\n//     } catch (error) {\n//         console.error(\"Error converting date:\", error);\n//         return getTodayDate(); // Return null or an error message if conversion fails\n//     }\n// };\n\nexport const convertDateStringToDate = (dateStr, formatStr) => {\n  try {\n    const date = parse(dateStr, formatStr, new Date());\n    return isNaN(date.getTime()) ? null : date;\n  } catch (error) {\n    console.error(\"Error parsing date:\", error);\n    return null;\n  }\n};\nexport const convertDateToDateString = (date, formatStr) => {\n  return format(date, formatStr);\n};\nexport function getWeekdays(date) {\n  const weekdays = [];\n  const startOfWeek = new Date(date); // Clone the given date\n  const dayOfWeek = startOfWeek.getDay(); // Sunday = 0, Monday = 1, ..., Saturday = 6\n\n  // Adjust start of week to Monday (ISO 8601 standard)\n  const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Sunday wraps to previous Monday\n  startOfWeek.setDate(startOfWeek.getDate() + diffToMonday);\n\n  // Iterate through the week (Monday to Sunday)\n  for (let i = 0; i < 7; i++) {\n    const currentDay = new Date(startOfWeek); // Clone the startOfWeek\n    currentDay.setDate(startOfWeek.getDate() + i); // Move to the next day\n    weekdays.push(currentDay);\n  }\n  return weekdays;\n}\nexport function getAllDaysOfMonth(date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const days = [];\n\n  // Get the number of days in the month\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n  // Create an array of all days in the month\n  for (let day = 1; day <= daysInMonth; day++) {\n    days.push(new Date(year, month, day));\n  }\n  return days;\n}\nexport function getTodayHours(date) {\n  const startOfDay = new Date(date); // Create a copy to avoid mutation\n  startOfDay.setHours(0, 0, 0, 0); // Reset to the beginning of the day\n\n  return Array.from({\n    length: 24\n  }, (_, hour) => {\n    const newDate = new Date(startOfDay); // Create a new Date object for each hour\n    newDate.setHours(hour);\n    return newDate;\n  });\n}\nexport function getDayName(dayIndex, dateType) {\n  const nameForWeek = [\"Chủ nhật\", \"Thứ 2\", \"Thứ 3\", \"Thứ 4\", \"Thứ 5\", \"Thứ 6\", \"Thứ 7\"];\n  const nameForMonth = [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"];\n  switch (dateType) {\n    case \"date\":\n      return \"\";\n    case \"week\":\n      return nameForWeek[dayIndex];\n    case \"month\":\n      return nameForMonth[dayIndex];\n  }\n}","map":{"version":3,"names":["format","parse","getTodayDate","today","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","getTodayYearMonthDay","getCurrentTime","hour","getHours","minutes","getMinutes","convertDateStringToDate","dateStr","formatStr","date","isNaN","getTime","error","console","convertDateToDateString","getWeekdays","weekdays","startOfWeek","dayOfWeek","getDay","diffToMonday","setDate","i","currentDay","push","getAllDaysOfMonth","days","daysInMonth","getTodayHours","startOfDay","setHours","Array","from","length","_","newDate","getDayName","dayIndex","dateType","nameForWeek","nameForMonth"],"sources":["/Users/phamkhanhhuy/Documents/OVERATE-VNTECH/TECHRES-PROJECTS/MOBILES/iOS/my-project/ASIP-DASHBOARD/src/utils/time-utils.ts"],"sourcesContent":["import { differenceInDays, format, isYesterday, parse } from \"date-fns\";\nimport { vi } from \"date-fns/locale\";\nimport { PickerMode } from \"../features/booking/booking-page\";\n\nexport const getTodayDate = (): string => {\n    const today = new Date();\n    const day = String(today.getDate()).padStart(2, \"0\");\n    const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed\n    const year = today.getFullYear();\n    return `${day}/${month}/${year}`;\n};\n\nexport const getTodayYearMonthDay = (): string => {\n    const today = new Date();\n    const day = String(today.getDate()).padStart(2, \"0\");\n    const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Tháng bắt đầu từ 0\n    const year = today.getFullYear();\n    return `${year}-${month}-${day}`; // Trả về định dạng YYYY-MM-DD\n};\n\nexport const getCurrentTime = (): string => {\n    const today = new Date();\n    const hour = today.getHours();\n    const minutes = today.getMinutes();\n    return `${hour}:${minutes}`;\n};\n\n/**\n * Converts a date string from one format to another.\n * @param {string} dateString - The date string to be converted.\n * @param {string} currentFormat - The current format of the date string (e.g., 'dd/MM/yyyy').\n * @param {string} desiredFormat - The desired format to convert to (e.g., 'yyyy/MM/dd').\n * @returns {string} - The converted date string in the desired format.\n */\n// export const convertDateFormat = (\n//     dateString: string,\n//     currentFormat: string,\n//     desiredFormat: string\n// ) => {\n//     try {\n//         // Parse the date using the current format\n//         const parsedDate = parse(dateString, currentFormat, new Date());\n//         // Format it to the desired format\n//         return format(parsedDate, desiredFormat);\n//     } catch (error) {\n//         console.error(\"Error converting date:\", error);\n//         return getTodayDate(); // Return null or an error message if conversion fails\n//     }\n// };\n\nexport const convertDateStringToDate = (dateStr: string,formatStr: string): Date | null => {\n    try {\n        const date = parse(dateStr, formatStr, new Date());\n        return isNaN(date.getTime()) ? null : date;\n    } catch (error) {\n        console.error(\"Error parsing date:\", error);\n        return null;\n    }\n};\n\nexport const convertDateToDateString = (date: Date, formatStr: string): string => {\n    return format(date, formatStr);\n};\n\n\nexport function getWeekdays(date: Date): Date[] {\n    const weekdays: Date[] = [];\n    const startOfWeek = new Date(date); // Clone the given date\n    const dayOfWeek = startOfWeek.getDay(); // Sunday = 0, Monday = 1, ..., Saturday = 6\n\n    // Adjust start of week to Monday (ISO 8601 standard)\n    const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Sunday wraps to previous Monday\n    startOfWeek.setDate(startOfWeek.getDate() + diffToMonday);\n\n    // Iterate through the week (Monday to Sunday)\n    for (let i = 0; i < 7; i++) {\n        const currentDay = new Date(startOfWeek); // Clone the startOfWeek\n        currentDay.setDate(startOfWeek.getDate() + i); // Move to the next day\n        weekdays.push(currentDay);\n    }\n\n    return weekdays;\n}\nexport function getAllDaysOfMonth(date: Date): Date[] {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const days: Date[] = [];\n\n    // Get the number of days in the month\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    // Create an array of all days in the month\n    for (let day = 1; day <= daysInMonth; day++) {\n        days.push(new Date(year, month, day));\n    }\n\n    return days;\n}\n\nexport function getTodayHours(date: Date): Date[] {\n    const startOfDay = new Date(date); // Create a copy to avoid mutation\n    startOfDay.setHours(0, 0, 0, 0); // Reset to the beginning of the day\n\n    return Array.from({ length: 24 }, (_, hour) => {\n        const newDate = new Date(startOfDay); // Create a new Date object for each hour\n        newDate.setHours(hour);\n        return newDate;\n    });\n}\n\nexport function getDayName(dayIndex: number, dateType: PickerMode): string {\n    const nameForWeek = [\n        \"Chủ nhật\",\n        \"Thứ 2\",\n        \"Thứ 3\",\n        \"Thứ 4\",\n        \"Thứ 5\",\n        \"Thứ 6\",\n        \"Thứ 7\",\n    ];\n    const nameForMonth = [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"];\n    switch (dateType) {\n        case \"date\":\n            return \"\";\n\n        case \"week\":\n            return nameForWeek[dayIndex];\n\n        case \"month\":\n            return nameForMonth[dayIndex];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}